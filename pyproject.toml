[tool.mypy]
python_version = "3.11"
files = ["gal_friday"]
namespace_packages = true
mypy_path = "gal_friday"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = false
strict_optional = true

# Module discovery
ignore_missing_imports = false
follow_imports = "normal"

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "joblib.*",
    "sortedcontainers.*",
    "pandas_ta.*",
    "pandas",
    "asyncio.queues",
    "numpy.*",
    "talib.*",
    "typer.*",
    "rich.*",
    "xgboost.*",
    "asyncpg.*",
    "scipy.*",
    "watchdog.*",
    "torch.*"
]
ignore_missing_imports = true

# Less strict checking for test files
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

# Even more relaxed for integration tests
[[tool.mypy.overrides]]
module = "tests.integration.*"
disallow_any_generics = false
disallow_any_explicit = false
disallow_any_decorated = false
disallow_any_unimported = false
warn_return_any = false
warn_no_return = false
allow_untyped_calls = true
allow_untyped_defs = true
allow_incomplete_defs = true

[tool.ruff]
# Target Python version
target-version = "py311"
# Line length to 99 characters
line-length = 99
# Exclude directories
exclude = [".venv", "__pycache__", ".git"]

[tool.ruff.lint]
# Configure rule selection
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "W",  # pycodestyle warnings
    "C90", # mccabe complexity
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "RUF", # Ruff-specific rules
    "ERA", # eradicate (commented-out code)
    "PL",  # Pylint
    "PT",  # pytest style
    "SIM", # simplify
    "T20", # print statements
    "NPY", # NumPy-specific rules
    "RET", # return statements
    "COM", # trailing commas
    "ICN", # import conventions
    "PIE", # misc. lints
    "Q",   # quotes
    "RSE", # raise statements
    "TCH", # type checking
    "PTH"  # pathlib
]

# Mccabe complexity setting
mccabe = { max-complexity = 15 }

# Bugbear settings
[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["df", "dt", "e", "f", "k", "m", "q", "v"]

# Per-file ignore settings
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__ files
"tests/*" = ["S101", "ANN"]  # Allow assertions and missing annotations in tests

# Docstring style
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: unit tests",
    "integration: integration tests",
    "slow: slow running tests",
    "memory_profile: tests that track memory usage"
]
# Enable asyncio features
asyncio_mode = "auto"
# Sets the event loop scope for asyncio fixtures
asyncio_default_fixture_loop_scope = "function"
# Set test log level
log_cli = true
log_cli_level = "INFO"

# Coverage configuration
[tool.coverage.run]
source = ["gal_friday"]
omit = [
    "tests/*",
    "*/__init__.py",
    "*.py[cod]",
    "*$py.class",
    "*venv*/*",
    "conftest.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]
ignore_errors = true
fail_under = 80

# Configuration for pip-compile
[tool.pip-compile]
output-file = "requirements.txt"
generate-hashes = true

# Project metadata
[project]
name = "gal-friday"
version = "0.1.0"
description = "A data analysis assistant application"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Project contributors"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"
