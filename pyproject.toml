[tool.mypy]
python_version = "3.11"
files = ["gal_friday"]
namespace_packages = true
mypy_path = "gal_friday"

# Strictness settings - enhanced for production
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true  # Changed to true for production
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true  # Changed to true for cleaner code
warn_no_return = true
warn_unreachable = true  # Changed to true to catch dead code
strict_optional = true

# Additional strict settings for production
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
strict_equality = true
extra_checks = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Performance and caching
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true

# Output formatting - organized by file
show_error_context = true
show_absolute_path = true
color_output = true
error_summary = true
show_traceback = true

# Module discovery
ignore_missing_imports = false
follow_imports = "normal"

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "joblib.*",
    "sortedcontainers.*",
    "pandas_ta.*",
    "pandas",
    "asyncio.queues",
    "numpy.*",
    "talib.*",
    "talib",
    "typer.*",
    "rich.*",
    "xgboost.*",
    "asyncpg.*",
    "scipy.*",
    "watchdog.*",
    "torch.*",
    "ccxt.*",
    "krakenex.*",
    "websockets.*",
    "aiohttp.*",
    "plotly.*",
    "dash.*",
    "tensorflow.*",
    "networkx.*",
    "statsmodels.*",
    "joblib",
    "scipy",
    "scipy.*",
    "xgboost",
    "torch",
    "tensorflow"
]
ignore_missing_imports = true

# Less strict checking for test files
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

# Even more relaxed for integration tests
[[tool.mypy.overrides]]
module = "tests.integration.*"
disallow_any_generics = false
disallow_any_explicit = false
disallow_any_decorated = false
disallow_any_unimported = false
warn_return_any = false
warn_no_return = false
allow_untyped_calls = true
allow_untyped_defs = true
allow_incomplete_defs = true

[tool.ruff]
# Target Python version
target-version = "py311"
# Line length adjusted for better readability
line-length = 88  # Changed from 99 to standard Black formatting
# Exclude directories
exclude = [
    ".venv", 
    "__pycache__", 
    ".git",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    "docs/_build"
]

[tool.ruff.lint]
# Enhanced rule selection for production
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "W",    # pycodestyle warnings
    "C90",  # mccabe complexity
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit (security)
    "RUF",  # Ruff-specific rules
    "ERA",  # eradicate (commented-out code)
    "PL",   # Pylint
    "PT",   # pytest style
    "SIM",  # simplify
    "T20",  # print statements
    "NPY",  # NumPy-specific rules
    "RET",  # return statements
    "COM",  # trailing commas
    "ICN",  # import conventions
    "PIE",  # misc. lints
    "Q",    # quotes
    "RSE",  # raise statements
    "TCH",  # type checking
    "PTH",  # pathlib
    "A",    # flake8-builtins (shadowing builtins)
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T10",  # flake8-debugger
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "YTT",  # flake8-2020
    "FURB", # refurb
    "PERF", # perflint
]

# Ignore specific rules that may be too strict for trading systems
ignore = [
    "D100",   # Missing docstring in public module (too strict for __init__.py)
    "D104",   # Missing docstring in public package
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "S104",   # Possible binding to all interfaces (needed for servers)
    "S108",   # Probable insecure usage of temp file/directory
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside exception class
    "EM101",   # Exception must not use string literal
    "EM102",   # Exception must not use f-string literal
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "G004",    # Logging statement uses f-string
]

# Mccabe complexity setting - reduced for better maintainability
mccabe = { max-complexity = 10 }

# Import sorting configuration
[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false
force-sort-within-sections = true
known-first-party = ["gal_friday"]
known-third-party = [
    "numpy", "pandas", "sklearn", "scipy", "matplotlib", "plotly",
    "sqlalchemy", "alembic", "asyncpg", "psycopg2",
    "aiohttp", "websockets", "ccxt", "krakenex",
    "pydantic", "typer", "rich", "click",
    "pytest", "asyncio", "concurrent"
]
split-on-trailing-comma = true

# Bugbear settings
[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["df", "dt", "e", "f", "k", "m", "q", "v"]

# Bandit security settings
[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

# Annotations settings
[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

# Comprehensions settings
[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

# Pytest settings
[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

# Return statement settings
[tool.ruff.lint.flake8-return]
max-returns = 6

# Simplify settings
[tool.ruff.lint.flake8-simplify]
max-members = 10

# Type checking settings
[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

# Per-file ignore settings - enhanced for specific file types
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",   # Unused imports in __init__ files
    "F403",   # Star imports
    "D104",   # Missing docstring in public package
]
"tests/*" = [
    "S101",   # Allow assertions in tests
    "ANN",    # Missing annotations in tests
    "D",      # Missing docstrings in tests
    "PLR2004", # Magic values in tests
    "S105",   # Hardcoded passwords in tests
    "S106",   # Hardcoded passwords in tests
    "SLF001", # Private member access in tests
]
"scripts/*" = [
    "T20",    # Allow print statements in scripts
    "S602",   # Allow subprocess calls in scripts
    "S603",   # Allow subprocess calls in scripts
]
"docs/*" = [
    "D",      # Documentation files don't need docstrings
    "INP001", # Implicit namespace packages in docs
]
"alembic/*" = [
    "D",      # Migration files don't need docstrings
    "ANN",    # Migration files don't need annotations
]

# Docstring style - enhanced
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

# Format configuration
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-source-first-line = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 72

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]  # Skip assert and shell injection in controlled environments

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: unit tests",
    "integration: integration tests", 
    "slow: slow running tests",
    "memory_profile: tests that track memory usage",
    "security: security-focused tests",
    "performance: performance benchmarks",
    "live_data: tests requiring live market data",
    "database: tests requiring database connection"
]
# Enable asyncio features
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
# Enhanced test logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
# Test discovery and execution
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--maxfail=5"
]
# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration - enhanced
[tool.coverage.run]
source = ["gal_friday"]
omit = [
    "tests/*",
    "*/__init__.py", 
    "*.py[cod]",
    "*$py.class",
    "*venv*/*",
    "conftest.py",
    "*/migrations/*",
    "*/alembic/*",
    "scripts/*"
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__", 
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "except ImportError:",
    "# pragma: no cover"
]
ignore_errors = true
fail_under = 85  # Increased from 80 for production
show_missing = true
skip_covered = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Configuration for pip-compile
[tool.pip-compile]
output-file = "requirements.txt"
generate-hashes = true
strip-extras = false
upgrade = false

# Project metadata - enhanced
[project]
name = "gal-friday"
version = "0.1.0"
description = "Enterprise-grade algorithmic trading system with advanced risk management"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Project contributors"}
]
maintainers = [
    {name = "Project contributors"}
]
keywords = ["trading", "algorithmic", "finance", "risk-management", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Typing :: Typed"
]
dependencies = [
    "arch",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.10.0",
    "asyncpg>=0.28.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0"
]

[project.optional-dependencies]
dev = [
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0",
    "pre-commit>=3.3.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]

[project.scripts]
gal-friday = "gal_friday.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/gal-friday"
Documentation = "https://gal-friday.readthedocs.io/"
Repository = "https://github.com/yourusername/gal-friday.git"
"Bug Tracker" = "https://github.com/yourusername/gal-friday/issues"

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["gal_friday*"]
exclude = ["tests*"]

# Pre-commit configuration hook
[[tool.pre-commit.repos]]
repo = "local"
hooks = [
    {
        id = "ruff-check",
        name = "ruff-check",
        entry = "ruff check --fix",
        language = "system",
        types = ["python"]
    },
    {
        id = "ruff-format", 
        name = "ruff-format",
        entry = "ruff format",
        language = "system",
        types = ["python"]
    },
    {
        id = "mypy",
        name = "mypy",
        entry = "mypy",
        language = "system",
        types = ["python"],
        pass_filenames = false
    },
    {
        id = "bandit",
        name = "bandit",
        entry = "bandit -r gal_friday/",
        language = "system",
        pass_filenames = false
    }
]