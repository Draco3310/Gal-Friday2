"""SQLAlchemy model for the 'model_versions' table."""

from datetime import datetime
from typing import Any
from uuid import UUID as PythonUUID

from sqlalchemy import DateTime, Index, String, Text, UniqueConstraint
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .models_base import Base


class ModelVersion(Base):
    """Represents a version of a machine learning model."""

    __tablename__ = "model_versions"

    # model_id is PRIMARY KEY but not auto-generated by DB in the schema (no DEFAULT uuid_generate_v4())
    # It's expected to be provided by the application.
    model_id: Mapped[PythonUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    model_name: Mapped[str] = mapped_column(String(255), nullable=False, index=True) # Added index based on schema
    version: Mapped[str] = mapped_column(String(50), nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime, nullable=False) # No server_default in schema
    training_completed_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    stage: Mapped[str | None] = mapped_column(String(50), server_default="development", index=True) # Added index based on schema
    metrics: Mapped[dict[str, Any] | None] = mapped_column(JSONB, nullable=True)
    hyperparameters: Mapped[dict[str, Any] | None] = mapped_column(JSONB, nullable=True)
    feature_importance: Mapped[dict[str, Any] | None] = mapped_column(JSONB, nullable=True)
    artifact_path: Mapped[str | None] = mapped_column(Text, nullable=True)

    # Relationship to ModelDeployment (one model version can have multiple deployments)
    deployments = relationship("ModelDeployment", back_populates="model_version")

    __table_args__ = (
        UniqueConstraint("model_name", "version", name="uq_model_name_version"),
        Index("idx_models_name", "model_name"),
        Index("idx_models_stage", "stage"))

    def __repr__(self) -> str:
        return (
            f"<ModelVersion(model_id={self.model_id}, model_name='{self.model_name}', "
            f"version='{self.version}', stage='{self.stage}')>"
        )
