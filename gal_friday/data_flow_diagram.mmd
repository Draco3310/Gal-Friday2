graph LR
    %% Style definitions (optional for better readability)
    classDef databases fill:#f9d,stroke:#333,stroke-width:2px
    classDef tradingsystem fill:#d3d3d3,stroke:#333,stroke-width:2px
    classDef external fill:#add8e6,stroke:#333,stroke-width:2px
    classDef mlops fill:#e6ffe6,stroke:#333,stroke-width:1px
    classDef dal fill:#f5f5f5,stroke:#333,stroke-width:1px
    classDef service fill:#dae8fc,stroke:#666,stroke-width:1px,color:#000
    classDef eventbus fill:#fffacd,stroke:#8B4513,stroke-width:2px,color:#000
    classDef database fill:#ffddc1,stroke:#B8860B,stroke-width:2px,color:#000
    classDef executor fill:#d8bfd8,stroke:#4B0082,stroke-width:1px,color:#000

    %% External World
    subgraph External
        KrakenAPI["Kraken Exchange API\n(REST & WebSocket)"]
    end

    %% Core Data Flow & Trading Logic
    subgraph TradingSystem[Gal-Friday Trading System]
        %% Configuration
        ConfigManager["ConfigManager\n(config.yaml)"]

        %% Databases
        subgraph Databases
            PostgreSQL["PostgreSQL DB\n(SQLAlchemy ORM)"]
            InfluxDB["InfluxDB\n(Time-Series Data)"]
            OrderRepository["OrderRepository"]
            PositionRepository["PositionRepository"]
            LogRepository["LogRepository"]
            EventLogRepository["EventLogRepository"]
            ModelMetadataRepository["ModelMetadataRepository"]
        end

        %% Core Services & Event Bus
        PubSubManager["PubSubManager\n(Event Bus)"]
        LoggerService["LoggerService"]
        MonitoringService["MonitoringService"]
        HaltCoordinator["HaltCoordinator"]
        CLIService["CLIService"]

        %% Data Ingestion & Feature Engineering
        subgraph IngestionAndFeatures["Data Ingestion & Features"]
            DataIngestor["DataIngestor"]
            FeatureEngine["FeatureEngine"]
            HistoricalDataService["HistoricalDataService\n(e.g., KrakenHistorical)"]
        end

        %% Prediction
        subgraph Prediction["Prediction"]
            PredictionService["PredictionService"]
            ProcessPool["ProcessPoolExecutor\n(for Model Inference)"]
            ModelRegistry["ModelLifecycle::Registry"]
            ModelArtifacts["Model Artifacts\n(Local/Cloud Storage)"]
        end
        
        %% Trading Strategy & Risk
        subgraph StrategyAndRisk["Strategy & Risk"]
            StrategyArbitrator["StrategyArbitrator"]
            RiskManager["RiskManager"]
        end

        %% Execution & Portfolio
        subgraph ExecutionAndPortfolio["Execution & Portfolio"]
            ExecutionHandler["ExecutionHandler\n(e.g., KrakenExecutionHandler)"]
            PortfolioManager["PortfolioManager"]
            subgraph PortfolioSubComponents["Portfolio Sub-Components"]
                FundsManager["FundsManager"]
                PositionManager["PositionManager"]
                ValuationService["ValuationService"]
                MarketPriceService["MarketPriceService\n(e.g., KrakenMarketPrice)"]
            end
        end

        %% MLOps - Model Lifecycle
        subgraph MLOps["MLOps - Model Lifecycle"]
            ModelRegistry --> ModelArtifacts
            ExperimentManager["ModelLifecycle::ExperimentManager"]
            RetrainingPipeline["ModelLifecycle::RetrainingPipeline"]
            DriftDetector["ModelLifecycle::DriftDetector"]
        end
        
        %% DAL - Data Access Layer (conceptual, repositories use DBs)
        subgraph DAL["Data Access Layer (Repositories)"]
        end
    
    %% == Interactions ==

    %% Configuration Loading
    ConfigManager --> DataIngestor;
    ConfigManager --> FeatureEngine;
    ConfigManager --> PredictionService;
    ConfigManager --> StrategyArbitrator;
    ConfigManager --> RiskManager;
    ConfigManager --> ExecutionHandler;
    ConfigManager --> PortfolioManager;
    ConfigManager --> LoggerService;
    ConfigManager --> MonitoringService;
    ConfigManager --> ModelRegistry;
    ConfigManager --> ExperimentManager;
    ConfigManager --> RetrainingPipeline;
    ConfigManager --> HistoricalDataService;
    ConfigManager --> MarketPriceService;

    %% Data Ingestion Flow
    KrakenAPI -- "Real-time Market Data (WebSocket)" --> DataIngestor;
    DataIngestor -- "MarketDataOHLCVEvent\nMarketDataL2Event\nMarketDataTradeEvent" --> PubSubManager;
    %% For bootstrapping/backtesting
    HistoricalDataService -- "Historical OHLCV" --> FeatureEngine;
    KrakenAPI -- "Historical Data (REST)" --> HistoricalDataService;
    
    %% Feature Engineering
    PubSubManager -- "MarketData Events" --> FeatureEngine;
    FeatureEngine -- "FeatureEvent" --> PubSubManager;
    %% Store processed data
    FeatureEngine -- "OHLCV History, L2 Books, Trades" --> PostgreSQL;

    %% Prediction Flow
    PubSubManager -- "FeatureEvent" --> PredictionService;
    PredictionService -- "Loads Model Details" --> ModelRegistry;
    ModelRegistry -- "Fetches Artifact Path" --> ModelArtifacts;
    PredictionService -- "Submits Inference Task (Features, Model Path)" --> ProcessPool;
    %% Result via Future
    ProcessPool -- "Executes model.predict()" --> PredictionService;
    PredictionService -- "PredictionEvent" --> PubSubManager;
    PredictionService -- "Active Experiments Info" --> ExperimentManager;
    ExperimentManager -- "Routes to Variants (Conceptual)" --> PredictionService;


    %% Strategy & Risk Flow
    PubSubManager -- "PredictionEvent" --> StrategyArbitrator;
    StrategyArbitrator -- "Queries Current Price" --> MarketPriceService;
    StrategyArbitrator -- "TradeSignalProposedEvent" --> PubSubManager;

    PubSubManager -- "TradeSignalProposedEvent" --> RiskManager;
    RiskManager -- "Queries Portfolio State (Equity, Positions, Drawdown)" --> PortfolioManager;
    RiskManager -- "Queries Current Price" --> MarketPriceService;
    %% Trade signal events
    RiskManager -- "TradeSignalApprovedEvent\nTradeSignalRejectedEvent" --> PubSubManager;

    %% Execution Flow
    %% Via OrderExecutionManager if exists
    PubSubManager -- "TradeSignalApprovedEvent" --> ExecutionHandler;
    ExecutionHandler -- "Submit/Cancel Order (REST)" --> KrakenAPI;
    KrakenAPI -- "Order Ack/Fill (REST/WebSocket)" --> ExecutionHandler;
    ExecutionHandler -- "ExecutionReportEvent" --> PubSubManager;
    %% For reconciliation or direct queries
    ExecutionHandler -- "Queries Account Balances/Positions (REST)" --> KrakenAPI;

    %% Portfolio Management
    PubSubManager -- "ExecutionReportEvent" --> PortfolioManager;
    PortfolioManager -- "Updates" --> FundsManager;
    PortfolioManager -- "Updates" --> PositionManager;
    PortfolioManager -- "Triggers Valuation" --> ValuationService;
    ValuationService -- "Queries Current Prices" --> MarketPriceService;
    ValuationService -- "Gets Balances/Positions" --> FundsManager;
    ValuationService -- "Gets Balances/Positions" --> PositionManager;
    %% Via Repositories
    PortfolioManager -- "Persists Snapshots/Trades" --> PostgreSQL;
    FundsManager -- "Persists Balances" --> PostgreSQL;
    PositionManager -- "Persists Positions/Trades" --> PostgreSQL;

    %% Logging
    DataIngestor -- "Log Messages" --> LoggerService;
    FeatureEngine -- "Log Messages" --> LoggerService;
    PredictionService -- "Log Messages" --> LoggerService;
    StrategyArbitrator -- "Log Messages" --> LoggerService;
    RiskManager -- "Log Messages" --> LoggerService;
    ExecutionHandler -- "Log Messages" --> LoggerService;
    PortfolioManager -- "Log Messages" --> LoggerService;
    MonitoringService -- "Log Messages" --> LoggerService;
    %% Centralized logging
    PubSubManager -- "LogEvent (from other services)" --> LoggerService;
    LoggerService -- "Console Output" --> operator>"Operator/Console"];
    LoggerService -- "File Logs" --> file[("Log Files")];
    LoggerService -- "DB Logs (AsyncPostgresHandler)" --> LogRepository;
    LoggerService -- "Time-Series Metrics" --> InfluxDB;
    LogRepository -- "Writes Logs" --> PostgreSQL;


    %% Monitoring & Control
    MonitoringService -- "Queries Portfolio State" --> PortfolioManager;
    MonitoringService -- "SystemStateEvent (RUNNING/HALTED)" --> PubSubManager;
    PubSubManager -- "PotentialHaltTriggerEvent\nSystemErrorEvent" --> MonitoringService;
    MonitoringService -- "Interacts with" --> HaltCoordinator;
    HaltCoordinator -- "Manages Halt Conditions" --> MonitoringService;
    CLIService -- "User Commands (Halt/Resume/Status)" --> MonitoringService;
    CLIService -- "User Commands (Shutdown)" --> main_app[MainAppController];
    CLIService -- "Queries Status/Portfolio" --> PortfolioManager;
    %% For recovery checklist
    CLIService -- "Interacts with" --> HaltCoordinator;

    %% MLOps Interactions
    RetrainingPipeline -- "Fetches Training Data" --> HistoricalDataService;
    RetrainingPipeline -- "Triggers Model Training" --> model_training_scripts["External Model Training Scripts/Process"];
    model_training_scripts -- "Registers New Model" --> ModelRegistry;
    ModelRegistry -- "Persists Metadata" --> ModelMetadataRepository;
    ModelMetadataRepository -- "Writes Metadata" --> PostgreSQL;
    %% Conceptually, or via logged data
    DriftDetector -- "Monitors Production Predictions/Features" --> PredictionService;
    DriftDetector -- "Signals Drift" --> RetrainingPipeline;
    %% For promoting models
    ExperimentManager -- "Updates Model Stages in" --> ModelRegistry;
    %% Via ExperimentRepository
    ExperimentManager -- "Persists Experiment Data" --> PostgreSQL;

    %% General Database Interactions (via Repositories)
    EventLogRepository -- "Persists All System Events" --> PostgreSQL;
    %% If EventStore is active
    PubSubManager -- "All Events" --> EventLogRepository;

    %% Market Price Service Interaction with Exchange
    MarketPriceService -- "Fetches Ticker/OHLC (REST)" --> KrakenAPI;
    
    %% Apply styles to nodes
    class PubSubManager eventbus;
    class KrakenAPI external;
    class PostgreSQL,InfluxDB database;
    class ConfigManager,LoggerService,MonitoringService,HaltCoordinator,CLIService,DataIngestor,FeatureEngine,HistoricalDataService,PredictionService,StrategyArbitrator,RiskManager,ExecutionHandler,PortfolioManager,FundsManager,PositionManager,ValuationService,MarketPriceService,ModelRegistry,ExperimentManager,RetrainingPipeline,DriftDetector,OrderRepository,PositionRepository,LogRepository,EventLogRepository,ModelMetadataRepository service;
    class ProcessPool executor;
    class ModelArtifacts database;
end
